// Package apiSpec provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package apiSpec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add an entry to the cache
	// (POST /cache)
	PostCache(c *gin.Context)
	// Get value for list of keys
	// (GET /cache/entries)
	GetCacheEntries(c *gin.Context, params GetCacheEntriesParams)
	// Get a list of n entries from the cache
	// (GET /cache/list/{n-entries})
	GetCacheListNEntries(c *gin.Context, nEntries int)
	// Get n sorted entries
	// (GET /cache/list/{sort}/{n})
	GetCacheListSortN(c *gin.Context, sort GetCacheListSortNParamsSort, n int)
	// Get metadata for all entries in cache
	// (GET /cache/metadata)
	GetCacheMetadata(c *gin.Context)
	// Get metadata for specific entry in cache
	// (GET /cache/metadata/{key})
	GetCacheMetadataKey(c *gin.Context, key string)
	// Get an entry from the cache
	// (GET /cache/{key})
	GetCacheKey(c *gin.Context, key string)
	// Update an entry in cache
	// (PUT /cache/{key})
	PutCacheKey(c *gin.Context, key string)
	// Post an entry with expiration time
	// (POST /cache/{time-to-live})
	PostCacheTimeToLive(c *gin.Context, timeToLive int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCache operation middleware
func (siw *ServerInterfaceWrapper) PostCache(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCache(c)
}

// GetCacheEntries operation middleware
func (siw *ServerInterfaceWrapper) GetCacheEntries(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCacheEntriesParams

	// ------------- Required query parameter "key" -------------

	if paramValue := c.Query("key"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument key is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", c.Request.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheEntries(c, params)
}

// GetCacheListNEntries operation middleware
func (siw *ServerInterfaceWrapper) GetCacheListNEntries(c *gin.Context) {

	var err error

	// ------------- Path parameter "n-entries" -------------
	var nEntries int

	err = runtime.BindStyledParameter("simple", false, "n-entries", c.Param("n-entries"), &nEntries)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter n-entries: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheListNEntries(c, nEntries)
}

// GetCacheListSortN operation middleware
func (siw *ServerInterfaceWrapper) GetCacheListSortN(c *gin.Context) {

	var err error

	// ------------- Path parameter "sort" -------------
	var sort GetCacheListSortNParamsSort

	err = runtime.BindStyledParameter("simple", false, "sort", c.Param("sort"), &sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "n" -------------
	var n int

	err = runtime.BindStyledParameter("simple", false, "n", c.Param("n"), &n)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter n: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheListSortN(c, sort, n)
}

// GetCacheMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetCacheMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheMetadata(c)
}

// GetCacheMetadataKey operation middleware
func (siw *ServerInterfaceWrapper) GetCacheMetadataKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheMetadataKey(c, key)
}

// GetCacheKey operation middleware
func (siw *ServerInterfaceWrapper) GetCacheKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCacheKey(c, key)
}

// PutCacheKey operation middleware
func (siw *ServerInterfaceWrapper) PutCacheKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameter("simple", false, "key", c.Param("key"), &key)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutCacheKey(c, key)
}

// PostCacheTimeToLive operation middleware
func (siw *ServerInterfaceWrapper) PostCacheTimeToLive(c *gin.Context) {

	var err error

	// ------------- Path parameter "time-to-live" -------------
	var timeToLive int

	err = runtime.BindStyledParameter("simple", false, "time-to-live", c.Param("time-to-live"), &timeToLive)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter time-to-live: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCacheTimeToLive(c, timeToLive)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/cache", wrapper.PostCache)
	router.GET(options.BaseURL+"/cache/entries", wrapper.GetCacheEntries)
	router.GET(options.BaseURL+"/cache/list/:n-entries", wrapper.GetCacheListNEntries)
	router.GET(options.BaseURL+"/cache/list/:sort/:n", wrapper.GetCacheListSortN)
	router.GET(options.BaseURL+"/cache/metadata", wrapper.GetCacheMetadata)
	router.GET(options.BaseURL+"/cache/metadata/:key", wrapper.GetCacheMetadataKey)
	router.GET(options.BaseURL+"/cache/:key", wrapper.GetCacheKey)
	router.PUT(options.BaseURL+"/cache/:key", wrapper.PutCacheKey)
	router.POST(options.BaseURL+"/cache/:time-to-live", wrapper.PostCacheTimeToLive)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yY32/bNhDH/xWC26NSeVsHbHrriiEI1gXF1gEFCj9w4tliI5EseXJrGPrfhyOtX5Fc",
	"O83sZUDfFOV0PH4/d0eedzw3lTUaNHqe7bjPC6hEeHwp8gJ+1ei29Jd1xoJDBeF/dxBe4tYCz7hHp/Sa",
	"NwlHVcEVmqtSbWBgoDTCGhxZbERZw8y3TcIdfKiVA8mzd2GB1niZtMbm7/eQI7npg/sDvDXawzTIYhxl",
	"F0Qz4+8a8MBWTwz4cKit61fK49Q9aHT7R4VQhYdvHax4xr9JezbpHkw6oNLvQzgntpOQWtfToMhS6ZWh",
	"xST43CmLymie8Revb5gHtwHHsBDISkDPtqZmpJ4TObKPCguGBbCcIuHEHEtyHiJjvQPiB85Hv989W1C8",
	"xoIWVvGM//CMXiXcCizCptPojwQyUSiSSVBcN5Jn/LXx+HK/JO0SPP5iZACWG42gwzfC2lLl4av0vael",
	"25x+iLBNlDImVoju+8XiDCt1uRsWHJMIBkxICZKhGSjeJPx5jGb8wY3eiFJJprStMVr9PLXauy0dCLll",
	"8El59GT849u3cy4RnBZlmxLgnIkF5OuqElQu/IWUTGgGwe840CbZU00HWb6GGbjXgJ0qZEd54UQFCM7z",
	"7N39uKiUmFmxO9iSraJ3H2pw1DO0qCgbYwPpywFdDckAUFds0x42rqnlGTNh1BpmcqDdZytfgPp8yunW",
	"tCZsZWotHwX0GpCFbsZWxrFyKPWAKL1Pd/pqv25zFC3t5fYg34CQekFPsPP9WY6T5v5YXo/vwk8Ho+jw",
	"6d6zM9V8kUak3jhs0p0+jeifxuHtSTjJ72dJgq4rOraEz3lUcHBy9afufK5cNkf+jZomPUBePif0ZOU+",
	"AypAIQWKo+h/bw3/QyHbGEKbEmV5eSmrAxEwpafV1RqnuzvYNicr/Fs4x46X17Hz7n4dLS9ywTnKjRrR",
	"Wm1A0wFzkFy8tGiD5wDnLeRqpfL9FWaO3WnI/o+ournn4A20U/wiZLqb5P1jKuF0q51OBfUFtP+yYWM8",
	"52n4eLUR5RdNzc3sADfexIGBZY5WbaVAkA8ZJM5M/q8QUQ9/tgaHKjUnzIlvVAVvzCvS9JTMGEF4+G3i",
	"60D6VAZSSoA+lcLPFfDJqpgijDDH3UUXMR9qV/KMF4g2S9PS5KIsjMfsp8ViwZtl808AAAD//x02S3km",
	"EwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
